import config
import utils
import datetime


def create_audit_answer():
    orders_json = utils.request_to_MoySklad_orders(opr3='opr3')
    demands_json = utils.request_to_MoySklad_demands(opr3='opr3')
    cashin_json = utils.request_to_MoySklad_cashin()

    def create_and_moment():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω–æ–π –≤—Ä—É—á–Ω—É—é –¥–∞—Ç—ã"""
        answer = ''
        count = 0
        for order in orders_json['rows']:
            try:
                count += 1
                date_created = datetime.datetime.strptime(order['created'], '%Y-%m-%d %H:%M:%S.%f')
                if datetime.time(hour=10, minute=0, second=0) <= date_created.time() <= datetime.time(hour=23,
                                                                                                      minute=59,
                                                                                                      second=59):
                    date_created = date_created.date() + datetime.timedelta(days=1)
                else:
                    date_created = date_created.date()
                date_moment = datetime.datetime.strptime(order['moment'], '%Y-%m-%d %H:%M:%S.%f').date()
                if date_moment != date_created:
                    answer += f'{order["name"]}\n'
            except Exception as e:
                answer += f'–û—à–∏–±–∫–∞:{e} —É –∑–∞–∫–∞–∑–∞: {order["name"]}\n'

        if answer == '':
            answer += 'üü¢ –û—à–∏–±–æ–∫ –≤ <strong>–î–ê–¢–ê–• –ó–ê–ö–ê–ó–û–í</strong>\n–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        else:
            answer = 'üî¥ –û—à–∏–±–∫–∏ –≤ <strong>–î–ê–¢–ê–• –°–û–ó–î–ê–ù–ò–Ø</strong>:\n' + answer
        counted_orders = f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —É –û–ø–µ—Ä–∞—Ç–æ—Ä–∞-3:  <strong>{count}</strong>'
        return answer, counted_orders

    def audit_delivery_sum():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —É –∫—É—Ä—å–µ—Ä–æ–≤"""
        answer = ''
        for order in orders_json['rows']:
            if order['owner']['meta']['href'][-36:] == config.ID_OPERATOR:
                try:
                    for attribute in order['attributes']:
                        if attribute['name'] == '–°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏':
                            if 590 <= attribute['value'] <= 1190:
                                pass
                            else:
                                answer += f'{order["name"]}\n'
                except Exception as e:
                    answer += f'–û—à–∏–±–∫–∞:{e} —É {order["name"]}\n'
        if answer == '':
            answer += 'üü¢ –û—à–∏–±–æ–∫ –≤ <strong>–°–£–ú–ú–ê–• –î–û–°–¢–ê–í–û–ö</strong> –æ—Ç 490—Ä –¥–æ 1090—Ä —É –∫—É—Ä—å–µ—Ä–æ–≤\n–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        else:
            answer = 'üî¥ –û—à–∏–±–∫–∏ –≤ <strong>–î–û–°–¢–ê–í–ö–ê–•</strong> –æ—Ç 490—Ä –¥–æ 1090—Ä —É –∫—É—Ä—å–µ—Ä–æ–≤:\n' + answer
        return answer

    def audit_car_number_in_order_and_demand():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –Ω–æ–º–µ—Ä–∞ –º–∞—à–∏–Ω(—Å–∫–ª–∞–¥–æ–≤) –≤ –ó–∞–∫–∞–∑–∞—Ö –∏ –û—Ç–≥—Ä—É–∑–∫–∞—Ö.
        –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–∞–º–∏(–Ω–æ–º–µ—Ä–∞–º–∏) —ç—Ç–∏—Ö –ó–∞–∫–∞–∑–æ–≤ –∏ –û—Ç–≥—Ä—É–∑–æ–∫"""
        answer = ''
        idcar_ordername = {}
        for order in orders_json['rows']:
            try:
                id_order = order['id']
                id_car = order['store']['meta']['href'][-36:]
                name_order = order['name']
                idcar_ordername[id_order] = {id_car: name_order}
            except KeyError:
                answer += f'–û—à–∏–±–∫–∞ –∫–ª—é—á–∞ –≤ –∑–∞–∫–∞–∑–µ: {order["name"]}\n'

        idcar_demandname = {}
        for demand in demands_json['rows']:
            try:
                id_order = demand['customerOrder']['meta']['href'][-36:]
                id_car = demand['store']['meta']['href'][-36:]
                name_demand = demand['name']
                idcar_demandname[id_order] = {id_car: name_demand}
            except KeyError:
                answer += f'–û—à–∏–±–∫–∞ –∫–ª—é—á–∞ –≤ –∑–∞–∫–∞–∑–µ: {demand["name"]}\n'

        for id_order1, idcar_nameorder in idcar_ordername.items():
            for id_order2, idcar_namedemand in idcar_demandname.items():
                if id_order1 == id_order2:
                    idcar_nameorder = tuple(idcar_nameorder.items())[0]
                    idcar_namedemand = tuple(idcar_namedemand.items())[0]
                    if idcar_nameorder[0] != idcar_namedemand[0]:
                        answer += f'–≤ –∑–∞–∫–∞–∑–µ: {idcar_nameorder[1]} –∏ –æ—Ç–≥—Ä—É–∑–∫–µ: {idcar_namedemand[1]}\n'
        if answer == '':
            answer += 'üü¢ –í–æ –≤—Å–µ—Ö <strong>–ó–ê–ö–ê–ó–ê–• –∏ –û–¢–ì–†–£–ó–ö–ê–•</strong> –Ω–æ–º–µ—Ä–∞ –º–∞—à–∏–Ω —Å–æ–≤–ø–∞–¥–∞—é—Ç'
        else:
            answer = 'üî¥ –ù–æ–º–µ—Ä–∞ –º–∞—à–∏–Ω <strong>–ù–ï –°–û–í–ü–ê–î–ê–Æ–¢</strong>:\n' + answer
        return answer

    def audit_only_one_demand():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–≤—è–∑—å —Å –û—Ç–≥—Ä—É–∑–∫–∞–º–∏.
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–∞–º–∏(–Ω–æ–º–µ—Ä–∞–º–∏) –∑–∞–∫–∞–∑–æ–≤, –≥–¥–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –æ—Ç–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≥–¥–µ –Ω–µ—Ç –æ—Ç–≥—Ä—É–∑–æ–∫ –≤–æ–æ–±—â–µ"""
        answer = ''
        for order in orders_json['rows']:
            try:
                if len(order['demands']) == 1:
                    pass
                elif len(order['demands']) > 1:
                    answer += f'–∑–∞–∫–∞–∑: {order["name"]} - <strong>–ë–û–õ–¨–®–ï –û–î–ù–û–ô –û–¢–ì–†–£–ó–ö–ò</strong>\n'
            except KeyError:
                answer += f'–∑–∞–∫–∞–∑: {order["name"]} - <strong>–ù–ï–¢ –û–¢–ì–†–£–ó–ö–ò</strong>\n'
        if answer == '':
            answer += 'üü¢ –í–æ –≤—Å–µ—Ö <strong>–ó–ê–ö–ê–ó–ê–•</strong> –ø–æ –æ–¥–Ω–æ–π –æ—Ç–≥—Ä—É–∑–∫–µ'
        else:
            answer = 'üî¥ –í <strong>–ó–ê–ö–ê–ó–ê–• –ï–°–¢–¨ –û–®–ò–ë–ö–ò</strong> —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º <strong>–û–¢–ì–†–£–ó–û–ö</strong>:\n' + answer
        return answer

    def audit_sum_in_order_and_demand():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ —Å—É–º–º—ã –≤ –ó–∞–∫–∞–∑–∞—Ö –∏ –û—Ç–≥—Ä—É–∑–∫–∞—Ö.
        –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–∞–º–∏(–Ω–æ–º–µ—Ä–∞–º–∏) —ç—Ç–∏—Ö –ó–∞–∫–∞–∑–æ–≤ –∏ –û—Ç–≥—Ä—É–∑–æ–∫"""
        answer = ''
        full_sum = 0.0
        id_sum_ordername = []
        for order in orders_json['rows']:
            try:
                id_order = order['id']
                sum_order = order['sum']
                name_order = order['name']
                id_sum_ordername.append([id_order, sum_order, name_order])
                full_sum += sum_order
            except KeyError:
                answer += f'–û—à–∏–±–∫–∞ –∫–ª—é—á–∞ –≤ –∑–∞–∫–∞–∑–µ: {order["name"]}\n'
        full_sum = int(full_sum / 100)
        zp = int(full_sum / 100 * 6)
        id_sum_demandname = []
        for demand in demands_json['rows']:
            try:
                id_order = demand['customerOrder']['meta']['href'][-36:]
                sum_order = demand['sum']
                name_demand = demand['name']
                id_sum_demandname.append([id_order, sum_order, name_demand])
            except KeyError:
                answer += f'–û—Ç–≥—Ä—É–∑–∫–∞ {demand["name"]} –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∑–∞–∫–∞–∑–æ–º\n'

        for id_order1, sum1, ordername in id_sum_ordername:
            for id_order2, sum2, demandname in id_sum_demandname:
                if id_order1 == id_order2:
                    if sum1 != sum2:
                        answer += f'–≤ –∑–∞–∫–∞–∑–µ: {ordername} –∏ –æ—Ç–≥—Ä—É–∑–∫–µ: {demandname}\n'
        if answer == '':
            answer += 'üü¢ –í–æ –≤—Å–µ—Ö <strong>–ó–ê–ö–ê–ó–ê–• –∏ –û–¢–ì–†–£–ó–ö–ê–•</strong> —Å—É–º–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç'
        else:
            answer = 'üî¥ –°—É–º–º—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç:\n' + answer
        return answer, f'–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤:  <strong>{str(full_sum)}</strong> ‚ÇΩ', f'6% –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã:  <strong>{str(zp)}</strong> ‚ÇΩ'

    def audit_date_in_order_demand_cashin():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç—ã –≤ –ó–∞–∫–∞–∑–∞—Ö, –û—Ç–≥—Ä—É–∑–∫–∞—Ö –∏ –ü—Ä–∏—Ö–æ–¥–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö.
        –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–∞–º–∏(–Ω–æ–º–µ—Ä–∞–º–∏) —ç—Ç–∏—Ö –ó–∞–∫–∞–∑–æ–≤ –∏ –û—Ç–≥—Ä—É–∑–æ–∫"""
        answer = ''
        id_date_ordername = []
        id_date_demandname = []
        id_date_cashin = []
        for order in orders_json['rows']:
            try:
                id_order = order['id']
                date_moment_order = datetime.datetime.strptime(order['moment'], '%Y-%m-%d %H:%M:%S.%f').date()
                name_order = order['name']
                id_date_ordername.append([id_order, date_moment_order, name_order])
            except KeyError:
                answer += f'–ó–∞–∫–∞–∑ {order["name"]} –Ω–µ —Å–≤—è–∑–∞–Ω —Å –æ—Ç–≥—Ä—É–∑–∫–æ–π\n'

        for demand in demands_json['rows']:
            try:
                id_order = demand['customerOrder']['meta']['href'][-36:]
                id_demand = demand['id']
                date_moment_demand = datetime.datetime.strptime(demand['moment'], '%Y-%m-%d %H:%M:%S.%f').date()
                name_demand = demand['name']
                id_date_demandname.append([id_order, id_demand, date_moment_demand, name_demand])
            except KeyError:
                answer += f'–û—Ç–≥—Ä—É–∑–∫–∞ {demand["name"]} –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∑–∞–∫–∞–∑–æ–º\n'

        for cashin in cashin_json['rows']:
            try:
                id_demand = cashin['operations'][0]['meta']['href'][-36:]
                date_moment_cashin = datetime.datetime.strptime(cashin['moment'], '%Y-%m-%d %H:%M:%S.%f').date()
                name_cashin = cashin['name']
                id_date_cashin.append([id_demand, date_moment_cashin, name_cashin])
            except KeyError:
                answer += f'–ü—Ä–∏—Ö–æ–¥–Ω—ã–π –æ—Ä–¥–µ—Ä {cashin["name"]} –Ω–µ —Å–≤—è–∑–∞–Ω —Å –æ—Ç–≥—Ä—É–∑–∫–æ–π\n'

        for id_order1, date_moment_order, ordername in id_date_ordername:
            for id_order2, id_demand, date_moment_demand, demandname in id_date_demandname:
                if id_order1 == id_order2:
                    if date_moment_order != date_moment_demand:
                        answer += f'–≤ –∑–∞–∫–∞–∑–µ: {ordername} –∏ –æ—Ç–≥—Ä—É–∑–∫–µ: {demandname}\n'

        for id_demand1, date_moment_cashin, cashinname in id_date_cashin:
            for id_order, id_demand2, date_moment_demand, demandname in id_date_demandname:
                if id_demand1 == id_demand2:
                    if date_moment_cashin != date_moment_demand:
                        answer += f'–≤ –æ—Ç–≥—Ä—É–∑–∫–µ: {demandname} –∏ –ø—Ä–∏—Ö–æ–¥–Ω–æ–º –æ—Ä–¥–µ—Ä–µ: {cashinname}\n'

        if answer == '':
            answer += 'üü¢ –í–æ –≤—Å–µ—Ö <strong>–ó–ê–ö–ê–ó–ê–•, –û–¢–ì–†–£–ó–ö–ê–• –∏ –ü–†–ò–•–û–î–ù–´–• –û–†–î–ï–†–ê–•</strong> –¥–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç'
        else:
            answer = 'üî¥ –î–∞—Ç—ã <strong>–ù–ï –°–û–í–ü–ê–î–ê–Æ–¢</strong>:\n' + answer
        return answer

    answer_sum, full_sum, zp = audit_sum_in_order_and_demand()
    listname_with_date_errors, counted_orders = create_and_moment()
    return (f'–ó–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ\n—Å    {utils.time_interval()[0]}\n–¥–æ {utils.time_interval()[1]}\n\n'
            f'‚óè {counted_orders}\n\n'
            f'‚óè {full_sum}\n\n'
            f'‚óè {zp}\n\n'
            f'{audit_delivery_sum()}\n\n'
            f'{listname_with_date_errors}\n\n'
            f'{audit_date_in_order_demand_cashin()}\n\n'
            f'{audit_car_number_in_order_and_demand()}\n\n'
            f'{audit_only_one_demand()}\n\n'
            f'{answer_sum}\n\n')
